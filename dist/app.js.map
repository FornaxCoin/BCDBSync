{"version":3,"sources":["../app.js"],"names":["createError","require","express","path","cookieParser","logger","sassMiddleware","mongoose","indexRouter","usersRouter","db","on","console","error","bind","once","log","app","set","join","__dirname","use","json","urlencoded","extended","src","dest","indentedSyntax","sourceMap","req","res","next","err","locals","message","get","status","render","module","exports"],"mappings":"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","sourcesContent":["var createError = require('http-errors');\nvar express = require('express');\nvar path = require('path');\nvar cookieParser = require('cookie-parser');\nvar logger = require('morgan');\nvar sassMiddleware = require('node-sass-middleware');\nconst mongoose = require('mongoose');\nimport * as AppModels from './models';\nimport {syncBlockChain} from \"./helpers/sync\";\nvar indexRouter = require('./routes/index');\nvar usersRouter = require('./routes/users');\nimport bodyParser from 'body-parser';\nimport  getConnection  from  './utils/connection.js';\n\nconst db = getConnection();\ndb.on('error', console.error.bind(console, '❌ connection error:'))\ndb.once('open', () => {\n  console.log(' 🍃 connected to mongoDB mLab');\n})\n\nvar app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(sassMiddleware({\n  src: path.join(__dirname, 'public'),\n  dest: path.join(__dirname, 'public'),\n  indentedSyntax: true, // true = .sass and false = .scss\n  sourceMap: true\n}));\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\n(async()=>{\n  console.log(\"hello\")\n  await syncBlockChain();\n})()\n\nmodule.exports = app;\n"],"file":"app.js"}