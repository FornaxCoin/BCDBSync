{"version":3,"sources":["../helpers/sync.js"],"names":["ObjectId","require","ObjectID","syncBlockChain","console","log","Block","findOne","sort","response","number","responseCrash","currentBlock","find","id","limit","previousCrash","deleteMany","$gt","Transaction","blockNumber","latestBlock","downloadBlockChain","fromBlockNumber","toBlockNumber","i","blockAndTransactionToDB","blockNumberOrBlockHash","toString","block","newBlock","transactionsArray","transactions","transactionHash","receipt","transaction","newTransaction","value","nonce","gasPrice","input","save","push","_id","create","process","exit"],"mappings":"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","sourcesContent":["import {getBlock, getTransaction, getTransactionReceipt} from './Web3Wrapper.js'\nimport {Block,Transaction} from \"../models/index.js\";\nimport {subscribeBlock} from \"./Web3WebSocket.js\"\nvar ObjectId = require('mongodb').ObjectID;\n\n\nexport const syncBlockChain = async()=>{\n\n    while(true){\n        console.log(\"inloop\")\n        let response = await Block.findOne({}).sort('-number')\n        let responseCrash = await Block.findOne({number:null})\n        let currentBlock = -1;\n        console.log(\"response\",response)\n        if(response !== null && response!==\"\" && !responseCrash){\n            currentBlock = response.number;\n        }else{\n            let previousCrash = await Block.find({ \"_id\": { \"$lt\": ObjectId(responseCrash.id) }}).sort({ \"_id\": -1 }).limit(1)//get the previous record of the given id\n            currentBlock = previousCrash.number - 1;\n            await Block.deleteMany({number: {$gt: currentBlock}})\n            await Transaction.deleteMany({blockNumber: {$gt: currentBlock}})\n        }\n        let latestBlock= await getBlock('latest')\n        console.log(\"currentBlock\",currentBlock)\n        if(currentBlock<latestBlock.number){\n            console.log(\"Downloading...\")\n            await downloadBlockChain(currentBlock+1,latestBlock.number)\n        }else if(currentBlock===latestBlock.number){\n            console.log(\"Syncing...\")\n            await subscribeBlock();\n            break;\n        }else{\n\n        }\n    }\n\n}\nexport const downloadBlockChain = async (fromBlockNumber,toBlockNumber) =>{\n    console.log(\"Downloading...\")\n    for (let i=fromBlockNumber;i<=toBlockNumber;i++){\n        await blockAndTransactionToDB(i);\n    }\n}\n\nexport const blockAndTransactionToDB = async(blockNumberOrBlockHash)=>{\n    let block = await getBlock(blockNumberOrBlockHash.toString());\n    let newBlock = new Block;\n    newBlock={\n        ...block\n    };\n    // console.log(\"newBlocktransactions:\",newBlock.transactions)\n    let transactionsArray=newBlock.transactions;\n    newBlock.transactions=[];\n    await (async () =>{\n        if(transactionsArray!=null){\n            let receipt\n            await (async () =>{\n                for(let transactionHash of transactionsArray ){\n                    receipt = await getTransactionReceipt(transactionHash)\n                    let transaction = await getTransaction(transactionHash);\n                    let newTransaction = new Transaction({\n                        ...receipt,\n                        value: transaction.value,\n                        nonce: transaction.nonce,\n                        gasPrice: transaction.gasPrice,\n                        input:transaction.input,\n                    });\n                    console.log(\"transactionToDB:\",newTransaction.transactionHash);\n                    let response = await newTransaction.save();\n                    console.log('transactionFromDB:',response.transactionHash);\n                    newBlock.transactions.push(response._id);\n                }\n            })()\n        }\n    })()\n    console.log(\"blockToDB:\",newBlock.number);\n    block =  await Block.create(newBlock);\n    console.log(\"blockFromBD:\",block.number);\n    if(!block.number){\n        process.exit(1);\n    }\n}\n\n\n"],"file":"sync.js"}